name: Publish to NPM

on:
  push:
    branches:
      - main
    paths:
      - 'library-tool/**'

permissions:
  contents: read
  id-token: write  # Needed for trusted publishing

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      library-tool: ${{ steps.changes.outputs.library-tool }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            library-tool:
              - 'library-tool/**'

  test:
    needs: changes
    if: ${{ needs.changes.outputs.library-tool == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'library-tool/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./library-tool
        run: npm ci
      
      - name: Run tests (if available)
        working-directory: ./library-tool
        run: |
          npm run test:unit
          npm run test:integration
          npm run test:cli
          npm run test:performance
          echo "âœ… All test suites passed!"

  publish:
    needs: [changes, test]
    if: ${{ needs.changes.outputs.library-tool == 'true' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          cache-dependency-path: 'library-tool/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./library-tool
        run: npm ci
      
      - name: Check if version changed
        id: version-check
        working-directory: ./library-tool
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if version already exists on NPM
          if npm view tradux@$CURRENT_VERSION version 2>/dev/null; then
            echo "version_exists=true" >> $GITHUB_OUTPUT
            echo "Version $CURRENT_VERSION already exists on NPM"
          else
            echo "version_exists=false" >> $GITHUB_OUTPUT
            echo "Version $CURRENT_VERSION is new"
          fi
      
      - name: Publish to NPM (Trusted Publisher)
        if: steps.version-check.outputs.version_exists == 'false'
        working-directory: ./library-tool
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Git Tag
        if: steps.version-check.outputs.version_exists == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "v${{ steps.version-check.outputs.current_version }}"
          git push origin "v${{ steps.version-check.outputs.current_version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}